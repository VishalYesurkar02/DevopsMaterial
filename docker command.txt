run docker:  docker run centos

view Process:  docker ps

Stop Container:  docker stop trusting_borg

List of all stop Container:  docker ps -a

Removing stop container:  docker rm trusting_borg
							docker rm stoic_hugle
							
List All Images:  docker image ls --all

Remove Images:  docker rmi centos

Run Different version of ubuntu:   docker run ubuntu:artful

Append file to artful image:  docker run ubuntu:artful cat /etc/hosts

Port Mapping to 80:  docker run -p 80:8080 jenkins

Add Volume mapping to map the local directory(source) /opt/jenkins_data to (Destination)
 /var/jenkins inside the docker container

docker run -p 80:8080 -v /opt/jenkins_data:/var/jenkins_home jenkins

To Build Docker image :  docker build .

to give tag/name to image : docker build . -t <<Application name>>

to give tag/name to image and make publically :  docker build . -t <<docker_hub>>/<<Application name>> e.x., VishalYesurkar02/my_dacker_app

To Push Image: docker push docker_hub user/my_dacker_app

create repository through cli

docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname

--docker tag local-image:tagname new-repo:tagname
---docker push new-repo:tagname

Overview: I have containerized the ansible-playable application. Playable is an Ansible Playbook generator UI developed in MEAN stack using Yeoman angular-fullstack-generator and built using Docker. The tool may be used by an individual or a team to Generate Ansible Playbooks and test them


Instructions:  Run using the below command:

docker run -p 80:8080 mmumshad/ansible-playable 

Docker Hub Link:  https://hub.docker.com/r/mmumshad/ansible-playable/


Github Link with Dockerfile: https://github.com/mmumshad/ansible-playable/blob/master/Dockerfile

********************************************************************************
----Docker learn with basic commands-----------
*********************************************************************************

https://docs.docker.com/get-started/part3/

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager
docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1 # Win10
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
& "C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe" env myvm1 | Invoke-Expression   # Windows command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images


*********************************************************************************
----------------------------Dockerfile------------------------------------

# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]

----------------------------------------------------------------------------

*****************************************************************************
------------------------------requirements.txt-------------------------------
Flask
Redis
------------------------------------------------------------------------------

*****************************************************************************
------------------------------app.py-----------------------------------------
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)
	
----------------------------------------------------------------------------------

**********************************************************************************
-------------------------------docker-compose.yml---------------------------------
version: "3"
services:
  web:
    # replace username/repo:tag with your name and image details
    image: VishalYesurkar02/my_docker_app
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "4000:80"
    networks:
      - webnet
networks:
  webnet:

